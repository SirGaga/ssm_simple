<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        1.Mybatis 可以使用properties来引入外部properties文件中的内容
          resources:引入类路径下的资源
          url:引入网络路径或者磁盘路径下的资源
     -->
    <properties resource="dbconfig.properties">

    </properties>
    <!--
        2.settings 包含了很多重要的设置项，每一个设置项用一个 <setting name="mapUnderscoreToCamelCase" value="true"/> 来表示
            name 代表设置项名字，value 代表这个设置项的取值
    -->
    <settings>
        <!-- 是否开启驼峰命名规则映射，即从经典数据库列名 A_COLUMN 到经典Java属性名 aColumn 的类似映射 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!--显示的指定每个我们需要更改的配置的值，即使他的默认值跟我们要设置的值相同-->
        <!--开启延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--侵略延迟加载，设置全部加载还是按需加载-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--开启全局二级缓存机制-->
        <setting name="cacheEnabled" value="true"/>
    </settings>
    <!--
        3.typeAliases 别名处理器，可以为我们的Java类型起别名，主要对处理 Mapper 的 xml 中的 resultType 属性
    -->
    <typeAliases>
        <!-- typeAlias：为某个 Java 类型起别名，别名不区分大小写，type：指定要起别名的类型全类名，默认别名是类名的小写 employee；alias：指定新的别名 -->
        <!--<typeAlias type="com.zhangjie.bean.Employee" alias="Employee"/>-->
        <!-- package:为某个包下的所有的类批量起别名，name：指定包名（为当前包和该包下的所有的子包中的每一个类都起一个默认的别名（默认别名是类名的小写）） -->
        <package name="com.zhangjie.bean" />
        <!--批量起别名的情况下，可以使用@Alias("emp")某个类型指定新的别名-->
    </typeAliases>
    <!--
        4.environments：环境们，mybatis可以配置多种环境，default 指定使用某种环境，可以达到快速切换环境的目的
        每一个 environment 就是配置一个具体的环境，id代表当前环境的唯一标识
        transactionManager（事务管理器，type配置事务管理器的类型（JDBC(JdbcTransactionFactory)、MANAGED(ManagedTransactionFactory)、
        自定义事务管理器(实现 TransactionFactory 接口，type中写全类名)））
        和
        dataSource（数据源，type是数据源类型（UNPOOLED(UnpooledDataSourceFactory)、POOLED(PooledDataSourceFactory)、JNDI(JndiDataSourceFactory)、自定义(实现 DataSourceFactory 接口，type 写自定义的类的全类名)））
        两个标签必须都存在在 environment 标签中
     -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--
        5.databaseIdProvider 支持多数据库厂商
            type="DB_VENDOR"(VendorDatabaseIdProvider) 得到数据库厂商的标识（驱动自带，DatabaseMetaData.getDatabaseProductName()），mybatis 就能根据数据库厂商的标识来执行不同的sql
            Mapper.xml 中包裹 sql 语句的标签中databaseId 属性代表的就是这一条sql语句对应的数据库，即在获取到数据库厂商标识的情况下根据厂商标识自动判断该执行哪些sql
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同的数据库起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlServer"/>
    </databaseIdProvider>
    <!--
        将我们写好的 sql 映射文件(EmployeeMapper.xml)一定要注册到全局配置文件(mybatis-config.xml)中
        6.mappers：将 sql 映射注册到全局配置中
            resource：引用类路径下的sql映射文件
            url：引用网络路径下的或者磁盘路径下的sql映射文件（file:///var/mappers/AuthorMapper.xml）
            class：直接引用（注册）接口的全名，
                1.有sql映射文件，需要将sql映射文件跟接口放在同一个 package 中，且sql映射文件的名称跟接口的名称必须相同
                2.没有sql映射文件，所有的sql都是利用注解写在接口上
                推荐：比较重要的或者逻辑比较复杂的Dao接口写sql配置文件，不重要的或者逻辑比较简单的可以使用注解
    -->
    <mappers>
        <!--mapper:注册一个sql映射-->
        <!--<mapper resource="EmployeeMapper.xml"/>
        <mapper class="com.zhangjie.dao.EmployeeMapperAnnotation"/>-->
        <!--批量注册:必须要求 sql 映射文件和 Mapper 接口 放在相同的 package 中-->
        <package name="com.zhangjie.dao"/>
    </mappers>

</configuration>
