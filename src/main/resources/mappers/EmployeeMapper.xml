<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace 名称空间,指定为借口的全类名
    id 唯一标识,跟借口中的方法保持一致
    resultType 返回值类型
    #{id} 从传递过来的参数中取出id值
-->
<mapper namespace="com.zhangjie.dao.EmployeeMapper">
    <!--
        eviction 缓存的回收策略：
            LRU - 最近最少使用的，移除最长时间不被使用的对象，默认
            FIFO - 先进先出，按照对象进入缓存的顺序来移除它
            SOFT - 软引用，移除基于垃圾回收器状态和软引用规则的对象
            WEAK - 弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象
        flushInterval 缓存刷新间隔 缓存多长时间清空一次 默认不清空，可以设置一个毫秒值
        readOnly 缓存是否只读
            true :只读，mybatis认为所有从缓存中获取的数据的操作都应该是只读操作的，不会修改数据，mybatis为了加快获取速度，直接将数据在缓存中的引用交给用户。不安全，速度快
            false:非只读，默认，mybatis认为获取来的数据可能会被修改，mybatis会利用序列化和反序列化技术克隆一个新的数据给用户。安全，速度慢
        size 代表可以缓存多少个元素
        type 指定自定义缓存的全类名，需要自定义的话需要实现Cache接口
    -->
    <!--<cache eviction="LRU" flushInterval="60000" readOnly="false"  size="1024" ></cache>-->

    <!--<select id="getEmployeeMapList" resultType="com.zhangjie.bean.Employee" databaseId="mysql" >
        select * from tbl_employee where last_name like #{lastName}
    </select>-->
    <select id="getEmployeeMap" resultType="com.zhangjie.bean.Employee"  >
        select * from tbl_employee where id = #{id}
    </select>
    <!--resultType:如果返回的是一个集合，要写集合中元素的类型-->
    <select id="getEmployeeList" resultType="com.zhangjie.bean.Employee"  >
        select * from tbl_employee where last_name like #{lastName}
    </select>
    <select id="getEmployeeByConditions" resultType="com.zhangjie.bean.Employee"  >
        select * from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>
    <select id="getEmployeeByIdAndLastName" resultType="com.zhangjie.bean.Employee" >
        select * from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>
    <select id="getEmployeeById" resultType="com.zhangjie.bean.Employee" databaseId="mysql" >
        select * from tbl_employee where id = #{id}
    </select>
    <!--
        parameterType 可省略，可以写全类名或者别名
        mysql支持自增主键，自增逐渐的值的获取，mybatis也是利用 statement.getGeneratedKeys() 来返回的
        useGeneratedKeys 使用自增主键获取主键值策略
        keyProperty 指定对应的主键值，也就是mybatis获取到主键值以后将这个值封装给JavaBean的哪个属性
        Oracle不支持自增，Oracle 使用序列来模拟自增
        每次插入的数据的主键是从序列中拿到的值

     -->
    <insert id="addEmployee" parameterType="com.zhangjie.bean.Employee"  flushCache="true" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee (last_name,gender,email) values (#{lastName},#{gender},#{email})
    </insert>
    <!--<insert id="addEmployee" parameterType="com.zhangjie.bean.Employee" databaseId="oracle" flushCache="true" useGeneratedKeys="true" keyProperty="id">
        &lt;!&ndash;
        	keyProperty 将查询出来的主键值封装给JavaBean的哪一个属性
        	order="BEFORE" 当前sql在插入sql之前执行
        	resultType="Integer" 查出的数据的返回值类型
        &ndash;&gt;

        &lt;!&ndash;<selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            select EMPLOYEES_SEQ.nextval from dual
        </selectKey>&ndash;&gt;
        &lt;!&ndash; 插入的主键是从序列中获取到的 &ndash;&gt;
        insert into tbl_employee (id,last_name,gender,email) values (#{id},#{lastName},#{gender},#{email})
    </insert>-->

    <update id="editEmployeeById" flushCache="true" parameterType="com.zhangjie.bean.Employee"  >
        update tbl_employee set last_name = #{lastName}, gender = #{gender}, email = #{email} where id = #{id}
    </update>

    <delete id="delEmployeeById" parameterType="integer"  flushCache="true" >
        delete from tbl_employee where id = #{id}
    </delete>
</mapper>